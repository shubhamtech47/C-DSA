//Bubble Sort
//Ascending order
//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		for(int j=0; j<n-i-1; j++){
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//			}
//		}
//	}
//	print(arr,n);
//}
//
//int main(){
//	int arr[5] = {5, 4, 1, 3, 2};
//	bubbleSort(arr, 5);
//	return 0;
//}



//Descending order

//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		for(int j=0; j<n-i-1; j++){
//			if(arr[j] < arr[j+1]){
//				swap(arr[j], arr[j+1]);
//			}
//		}
//	}
//	print(arr,n);
//}
//
//int main(){
//	int arr[5] = {5, 4, 1, 3, 2};
//	bubbleSort(arr, 5);
//	return 0;
//}



//Swap

//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//int main(){
//	int arr[5] = {5, 4, 1, 3, 2};
//	bubbleSort(arr, 5);
//	cout << endl;
//	return 0;
//}


//Selection Sort

//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//void selectionSort(int arr[], int n){
//	//O(n*logn) is better than O(n^2)
//	for(int i=0; i<n-1; i++){
//		int minIdx = i;
//		//loop for find min
//		for(int j=i+1; j<n; j++){
//			if(arr[j] < arr[minIdx]){
//				minIdx = j;
//			}
//		}
//		swap(arr[i], arr[minIdx]);
//	}
//	print(arr, n);
//}
//
//int main(){
//	int arr[5] = {5, 4, 1, 3, 2};
//	selectionSort(arr, 5);
//	return 0;
//}


//Insertion Sort

////Ascending order
//
//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//void selectionSort(int arr[], int n){
//	//O(n*logn) is better than O(n^2)
//	for(int i=0; i<n-1; i++){
//		int minIdx = i;
//		//loop for find min
//		for(int j=i+1; j<n; j++){
//			if(arr[j] < arr[minIdx]){
//				minIdx = j;
//			}
//		}
//		swap(arr[i], arr[minIdx]);
//	}
//	print(arr, n);
//}
//
//void insertionSort(int arr[], int n){
//	for(int i=1; i<n; i++){
//		int curr = arr[i];
//		int prev = i-1;
//		while(prev >= 0 && arr[prev] > curr){
//			swap(arr[prev], arr[prev+1]);
//			prev--;
//		}
//		arr[prev+1] = curr;
//	}
//	print(arr, n);
//}
//
//
//int main(){
//	int arr[5] = {5, 4, 1, 3, 2};
//	insertionSort(arr, 5);
//	return 0;
//}


//Descending order

//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//void selectionSort(int arr[], int n){
//	//O(n*logn) is better than O(n^2)
//	for(int i=0; i<n-1; i++){
//		int minIdx = i;
//		//loop for find min
//		for(int j=i+1; j<n; j++){
//			if(arr[j] < arr[minIdx]){
//				minIdx = j;
//			}
//		}
//		swap(arr[i], arr[minIdx]);
//	}
//	print(arr, n);
//}
//
//void insertionSort(int arr[], int n){
//	for(int i=1; i<n; i++){
//		int curr = arr[i];
//		int prev = i-1;
//		while(prev >= 0 && arr[prev] < curr){
//			swap(arr[prev], arr[prev+1]);
//			prev--;
//		}
//		arr[prev+1] = curr;
//	}
//	print(arr, n);
//}
//
//
//int main(){
//	int arr[5] = {5, 4, 1, 3, 2};
//	insertionSort(arr, 5);
//	return 0;
//}


//Counting Sort

//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//void selectionSort(int arr[], int n){
//	//O(n*logn) is better than O(n^2)
//	for(int i=0; i<n-1; i++){
//		int minIdx = i;
//		//loop for find min
//		for(int j=i+1; j<n; j++){
//			if(arr[j] < arr[minIdx]){
//				minIdx = j;
//			}
//		}
//		swap(arr[i], arr[minIdx]);
//	}
//	print(arr, n);
//}
//
//void insertionSort(int arr[], int n){
//	for(int i=1; i<n; i++){
//		int curr = arr[i];
//		int prev = i-1;
//		while(prev >= 0 && arr[prev] > curr){
//			swap(arr[prev], arr[prev+1]);
//			prev--;
//		}
//		arr[prev+1] = curr;
//	}
//	print(arr, n);
//}
//
//void countSort(int arr[], int n){
//	int freq[100000];  //range
//	int minVal = INT_MAX, maxVal = INT_MIN;
//	for(int i=0; i<n; i++){
//		minVal = min(minVal, arr[i]);
//		maxVal = max(maxVal, arr[i]);
//	}
//	
//	//1st step ->O(n)
//	for(int i=0; i<n; i++){
//		freq[arr[i]]++;
//	}
//	
//	//2nd step ->O(range) = max -min
//	for(int i=minVal, j=0; i<=maxVal; i++){
//		while(freq[i] > 0){
//			arr[j++] = i;
//			freq[i]--;
//		}
//	}
//	
//	print(arr, n);
//}
//
//
//int main(){
//	int arr[8] = {1, 4, 1, 3, 2, 4, 3, 7};
//	countSort(arr, 8);
//	return 0;
//}



//Inbuilt Sort

//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//void selectionSort(int arr[], int n){
//	//O(n*logn) is better than O(n^2)
//	for(int i=0; i<n-1; i++){
//		int minIdx = i;
//		//loop for find min
//		for(int j=i+1; j<n; j++){
//			if(arr[j] < arr[minIdx]){
//				minIdx = j;
//			}
//		}
//		swap(arr[i], arr[minIdx]);
//	}
//	print(arr, n);
//}
//
//void insertionSort(int arr[], int n){
//	for(int i=1; i<n; i++){
//		int curr = arr[i];
//		int prev = i-1;
//		while(prev >= 0 && arr[prev] > curr){
//			swap(arr[prev], arr[prev+1]);
//			prev--;
//		}
//		arr[prev+1] = curr;
//	}
//	print(arr, n);
//}
//
//void countSort(int arr[], int n){
//	int freq[100000];  //range
//	int minVal = INT_MAX, maxVal = INT_MIN;
//	for(int i=0; i<n; i++){
//		minVal = min(minVal, arr[i]);
//		maxVal = max(maxVal, arr[i]);
//	}
//	
//	//1st step ->O(n)
//	for(int i=0; i<n; i++){
//		freq[arr[i]]++;
//	}
//	
//	//2nd step ->O(range) = max -min
//	for(int i=minVal, j=0; i<=maxVal; i++){
//		while(freq[i] > 0){
//			arr[j++] = i;
//			freq[i]--;
//		}
//	}
//	
//	print(arr, n);
//}
//
//
//int main(){
//	int arr[8] = {1, 4, 1, 3, 2, 4, 3, 7};
//	sort(arr, arr+8, greater<int>());
//	
//	print(arr, 8);
//	return 0;
//}


//Q. Sort this array of characters using insertion sort in descending order.


//#include<iostream>
//using namespace std;
//
//void print(int arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << " ";
//	}
//	cout << endl;
//}
//
//void print(char arr[], int n){
//	for(int i=0; i<n; i++){
//		cout << arr[i] << ",";
//	}
//	cout << endl;
//}
//
//void bubbleSort(int arr[], int n){
//	for(int i=0; i<n-1; i++){
//		bool isSwap = false;
//		cout << "outer loop";
//		for(int j=0; j<n-i-1; j++){
//			cout << "inner loop";
//			if(arr[j] > arr[j+1]){
//				swap(arr[j], arr[j+1]);
//				isSwap = true;
//			}
//		}
//		if(!isSwap){
//			//array is already sorted
//			return;
//		}
//	}
//	print(arr,n);
//}
//
//void selectionSort(int arr[], int n){
//	//O(n*logn) is better than O(n^2)
//	for(int i=0; i<n-1; i++){
//		int minIdx = i;
//		//loop for find min
//		for(int j=i+1; j<n; j++){
//			if(arr[j] < arr[minIdx]){
//				minIdx = j;
//			}
//		}
//		swap(arr[i], arr[minIdx]);
//	}
//	print(arr, n);
//}
//
//void insertionSort(int arr[], int n){
//	for(int i=1; i<n; i++){
//		int curr = arr[i];
//		int prev = i-1;
//		while(prev >= 0 && arr[prev] > curr){
//			swap(arr[prev], arr[prev+1]);
//			prev--;
//		}
//		arr[prev+1] = curr;
//	}
//	print(arr, n);
//}
//
//void countSort(int arr[], int n){
//	int freq[100000];  //range
//	int minVal = INT_MAX, maxVal = INT_MIN;
//	for(int i=0; i<n; i++){
//		minVal = min(minVal, arr[i]);
//		maxVal = max(maxVal, arr[i]);
//	}
//	
//	//1st step ->O(n)
//	for(int i=0; i<n; i++){
//		freq[arr[i]]++;
//	}
//	
//	//2nd step ->O(range) = max -min
//	for(int i=minVal, j=0; i<=maxVal; i++){
//		while(freq[i] > 0){
//			arr[j++] = i;
//			freq[i]--;
//		}
//	}
//	
//	print(arr, n);
//}
//
//void sortChar(char arr[], int n){
//	for(int i=1; i<n; i++){
//		int curr = arr[i];
//		int prev = i-1;
//		while(prev >= 0 && arr[prev] < curr){
//			swap(arr[prev], arr[prev+1]);
//			prev--;
//		}
//		arr[prev+1] = curr;
//	}
//	print(arr, n);
//}
//
//
//int main(){
//	char ch[6] = {'f', 'b', 'a', 'e', 'c', 'd'};
//	sortChar(ch, 6);
//	return 0;
//}
