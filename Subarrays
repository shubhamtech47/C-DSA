//Subarrays

//#include<iostream>
//using namespace std;
//
//void printSubarrays(int *arr, int n){
//	for(int start=0; start < n; start++){
//		for(int end=start; end<n; end++){
//			cout << "(" << start << "," << end << ") ";
//		}
//		cout << endl;
//	}
//}
//
//int main(){
//	int arr[5] = {1, 2, 3, 4, 5};
//	int n = 5;
//	
//	printSubarrays(arr, n);
//	return 0;
//}


//#include<iostream>
//using namespace std;

//void printSubarrays(int *arr, int n){
//	for(int start=0; start < n; start++){
//		for(int end=start; end<n; end++){
//			//cout << "(" << start << "," << end << ") ";
//			for(int i=start; i<=end; i++){
//				cout << arr[i];
//			}
//			cout << ",";
//		}
//		cout << endl;
//	}
//}
//
//int main(){
//	int arr[5] = {1, 2, 3, 4, 5};
//	int n = 5;
//	
//	printSubarrays(arr, n);
//	return 0;
//}


//Max Subarray Sum

//#include<iostream>
//using namespace std;
//
//void maxSubarraySum1(int *arr, int n){
//	for(int start=0; start<n; start++){
//		for(int end=start; end<n; end++){
//			int currSum = 0;
//			for(int i=start; i<=end; i++){
//				currSum += arr[i];
//			}
//			cout << currSum << ",";
//		}
//		
//		cout << endl;
//	}
//}
//
//
//int main(){
//	int arr[6] = {2, -3, 6, -5, 4, 2};
//	int n = sizeof(arr) / sizeof(int);
//	
//	maxSubarraySum1(arr, n);
//	return 0;
//}


//MaxSum

//#include<iostream>
//using namespace std;

//void maxSubarraySum1(int *arr, int n){
//	int maxSum = INT_MIN;
//	
//	for(int start=0; start<n; start++){
//		for(int end=start; end<n; end++){
//			int currSum = 0;
//			for(int i=start; i<=end; i++){
//				currSum += arr[i];
//			}
//			cout << currSum << ",";
//			maxSum = max(maxSum,currSum);   
//		}
//		
//		cout << endl;
//	}
//	cout << "maximum subarray sum = " << maxSum << endl;
//}
//
//
//int main(){
//	int arr[6] = {2, -3, 6, -5, 4, 2};
//	int n = sizeof(arr) / sizeof(int);
//	
//	maxSubarraySum1(arr, n);
//	return 0;
//}


//Max Subarray Sum

//#include<iostream>
//using namespace std;

//void maxSubarraySum2(int *arr, int n){
//	int maxSum = INT_MIN;
//	
//	for(int start=0; start<n; start++){
//		int currSum = 0;
//		for(int end=start; end<n; end++){
//			currSum += arr[end];
//			maxSum = max(maxSum,currSum);   
//		}
//	}
//	cout << "maximum subarray sum = " << maxSum << endl;
//}
//
//
//int main(){
//	int arr[6] = {2, -3, 6, -5, 4, 2};
//	int n = sizeof(arr) / sizeof(int);
//	
//	maxSubarraySum2(arr, n);
//	return 0;
//}

//Kadane's Algorithm


//#include<iostream>
//using namespace std;
//
//void maxSubarraySum2(int *arr, int n){
//	int maxSum = INT_MIN;
//	
//	for(int start=0; start<n; start++){
//		int currSum = 0;
//		for(int end=start; end<n; end++){
//			currSum += arr[end];
//			maxSum = max(maxSum,currSum);   
//		}
//	}
//	cout << "maximum subarray sum = " << maxSum << endl;
//}
//
//void maxSubarraySum3(int *arr, int n){
//	int maxSum = INT_MIN; 
//	int currSum = 0;
//	
//	for(int i=0; i<n; i++){
//		currSum += arr[i];
//		maxSum = max(currSum, maxSum);
//		if(currSum < 0){
//			currSum = 0;
//		}
//	}
//	cout << "maximum subarray sum = " << maxSum << endl;
//}
//
//int main(){
//	int arr[6] = {2, -3, 6, -5, 4, 2};
//	int n = sizeof(arr) / sizeof(int);
//	
//	maxSubarraySum3(arr, n);
//	return 0;
//}


//Buy & Sell


//#include<iostream>
//using namespace std;
//
//void maxProfit(int *prices, int n){
//	int bestBuy[100000];
//	bestBuy[0] = INT_MAX;
//	cout << bestBuy[0] <<",";
//	
//	for(int i=1; i<n; i++){
//		bestBuy[i] = min(bestBuy[i-1], prices[i-1]);
//		cout << bestBuy[i] << ",";
//	}
//	cout << endl;
//}
//
//int main(){
//	int prices[6] = {7, 1, 5, 3, 6, 4};
//	int n = sizeof(prices) / sizeof(int);
//	
//	maxProfit(prices, n);
//	return 0;
//}


//#include<iostream>
//using namespace std;
//
//void maxProfit(int *prices, int n){
//	int bestBuy[100000];
//	bestBuy[0] = INT_MAX;
//	
//	for(int i=1; i<n; i++){
//		bestBuy[i] = min(bestBuy[i-1], prices[i-1]);
//	}
//	
//	int maxProfit = 0;  
//	for(int i=0; i<n; i++){
//		int currProfit = prices[i] - bestBuy[i];
//		maxProfit = max(maxProfit, currProfit);
//	}
//	cout << "max Profit = " << maxProfit << endl;
//}
//
//int main(){
//	int prices[6] = {7, 1, 5, 3, 6, 4};
//	int n = sizeof(prices) / sizeof(int);
//	
//	maxProfit(prices, n);
//	return 0;
//}

//Trapping Rainwater

//Left max

//#include<iostream>
//using namespace std;
//
//void trap(int *heights, int n){
//	int leftMax[20000];
//	leftMax[0] = INT_MIN;
//	cout << leftMax[0] << ",";
//	for(int i=1; i<n; i++){
//		leftMax[i] = max(leftMax[i-1], heights[i-1]);
//		cout << leftMax[i] << ",";
//	}
//	
//	cout << endl;
//}
//
//int main(){
//	int heights [7] = {4, 2, 0, 6, 3, 2, 5};
//	int n = sizeof(heights) / sizeof(int);
//	
//	trap(heights, n);
//	return 0;
//}


//Right Max

//#include<iostream>
//using namespace std;
//
//void trap(int *heights, int n){
//	int leftMax[20000], rightMax[20000];
//	leftMax[0] = INT_MIN;
//	rightMax[n-1] = INT_MIN;
//	
//	for(int i=1; i<n; i++){
//		leftMax[i] = max(leftMax[i-1], heights[i-1]);
//	}
//	
//	for(int i=n-2; i>=0; i--){
//		rightMax[i] = max(rightMax[i+1], heights[i+1]);
//		cout << rightMax[i] << ",";
//	}
//	cout << rightMax[n-1] << ",";
//	cout << endl;
//}

//int main(){
//	int heights [7] = {4, 2, 0, 6, 3, 2, 5};
//	int n = sizeof(heights) / sizeof(int);
//	
//	trap(heights, n);
//	return 0;
//}



//#include<iostream>
//using namespace std;
//
//int trap(int *heights, int n){
//	int leftMax[20000], rightMax[20000];
//	leftMax[0] = heights[0];
//	rightMax[n-1] = heights[n-1];
//	
//	for(int i=1; i<n; i++){
//		leftMax[i] = max(leftMax[i-1], heights[i-1]);
//	}
//	
//	for(int i=n-2; i>=0; i--){
//		rightMax[i] = max(rightMax[i+1], heights[i+1]);
//	}
//	
//	int waterTrapped = 0;
//	for(int i=0; i<n; i++){
//		int currWater = min(leftMax[i], rightMax[i]) - heights[i];
//		if(currWater > 0){
//			waterTrapped += currWater;
//		}
//	}
//	cout << "water trapped = " << waterTrapped << endl;
//	return waterTrapped;
//}
//
//int main(){
//	int heights [7] = {4, 2, 0, 6, 3, 2, 5};
//	int n = sizeof(heights) / sizeof(int);
//	
//	trap(heights, n);
//	return 0;
//}
